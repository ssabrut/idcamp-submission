# -*- coding: utf-8 -*-
"""Daily Temperature of Major Cities Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RDvh3p7S00pqkRMEdNBUy1pVwUzZys6R

# Acknowledgements

Dataset ini diambil dari [kaggle.com](https://www.kaggle.com/datasets/sudalairajkumar/daily-temperature-of-major-cities)

### Downloading Dataset
"""

# from google.colab import drive

# drive.mount('/content/drive')

# !mkdir ~/.kaggle
# !cp /content/drive/MyDrive/kaggle.json ~/.kaggle
# !chmod 600 ~/.kaggle/kaggle.json

# !kaggle datasets download -d sudalairajkumar/daily-temperature-of-major-cities

# !unzip daily-temperature-of-major-cities.zip

"""# Data Loading"""

import pandas as pd
import numpy as np

path = 'city_temperature.csv'
df = pd.read_csv(path, low_memory=False)
df.head()

"""# Exploratory Data Analysis

Dataset ini merupakan suhu rata-rata setiap hari pada setiap wilayah bagian bumi.

Dataset detail :
* Region : wilayah bumi bagian dari suhu yang diukur
* Country : negara dari suhu yang diukur
* State : negara dari suhu yang diukur
* City : kota dari suhu yang diukur
* Month : bulan diukurnya suhu
* Day : tanggal diukurnya suhu
* Year : tahun diukurnya suhu
* AvgTemperature : suhu rata-rata yang diukur
"""

print(f'The dataframe has {df.shape[0]} records and {df.shape[1]} columns')

print(f'Total missing values in the dataset {df.isna().sum().sum()} records')

print('Missing value in the dataframe')
print(df.isna().sum())

"""Dari sini kita bisa lihat bahwa missing value dari dataset ini sangatlah banyak namun kita tidak akan menggunakan State sehingga kita dapat menghapus kolom ini nanti"""

print('Unique values in every column')
print('-' * 25)
for i in df.columns:
  print(f'{i} = {len(set(df[i]))}')

df.info()

df.describe()

"""Hapus kolom yang relevan"""

col_to_drop = ['Country', 'State', 'City']
new_df = df.drop(col_to_drop, axis=1)
new_df.head()

"""Menggabungkan kolom Month, Day, dan Year menjadi satu kesatuan agar menjadi tanggal yang valid"""

new_df['Date'] = new_df['Day'].astype(str) + '-' + new_df['Month'].astype(str) + '-' + new_df['Year'].astype(str)
new_df.head()

"""Melihat distribusi data berdasarkan Region"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
from matplotlib import pyplot as plt
# %matplotlib inline
sns.set_style('darkgrid')

plt.figure(figsize=(20,8))
plt.ticklabel_format(style='plain', axis='x')
plt.title('The distribution of Region', fontsize=15, pad=20)
sns.histplot(y='Region', data=new_df)

"""### Plot every region average temperature by month and year

Dari data tersebut dapat kita simpulkan adalah data terbanyak datang dari region North America dan data paling sedikit datang dari Australia. Lalu kita akan lihat perubahan suhu rata-rata dari masing-masing region
"""

africa_df = new_df[new_df['Region'] == 'Africa']
asia_df = new_df[new_df['Region'] == 'Asia']
ausie_df = new_df[new_df['Region'] == 'Australia/South Pacific']
europe_df = new_df[new_df['Region'] == 'Europe']
middle_east_df = new_df[new_df['Region'] == 'Middle East']
north_america_df = new_df[new_df['Region'] == 'North America']
carribean_df = new_df[new_df['Region'] == 'South/Central America & Carribean']

"""##### Region Africa

Dapat disimpulkan suhu rata-rata di Africa mengalami penurunan setiap bulan namun mengalami kenaikan setiap tahun.
"""

fig, ax = plt.subplots(1, 2, figsize=(24,8))
africa_by_year = africa_df.groupby('Year')['AvgTemperature'].agg(np.mean)
africa_by_month = africa_df.groupby('Month')['AvgTemperature'].agg(np.mean)

# membuang tahun yang tidak valid
africa_by_year = africa_by_year.iloc[1:]

ax[0].title.set_text('Africa average temperatures per Year')
ax[1].title.set_text('Africa average temperatures per Month')
sns.lineplot(data=africa_by_year, ax=ax[0])
sns.lineplot(data=africa_by_month, ax=ax[1])

africa_min_year = 'Suhu terendah di Africa pada tahun ' + africa_by_year[africa_by_year == africa_by_year.min()].index[0].astype(str) + ' dengan suhu ' + np.round(africa_by_year.min(), 2).astype(str) + ' C'
africa_max_year = 'Suhu tertinggi di Africa pada tahun ' + africa_by_year[africa_by_year == africa_by_year.max()].index[0].astype(str) + ' dengan suhu ' + np.round(africa_by_year.max(), 2).astype(str) + ' C'
africa_min_month = 'Suhu terendah di Africa pada bulan ' + africa_by_month[africa_by_month == africa_by_month.min()].index[0].astype(str) + ' dengan suhu ' + np.round(africa_by_month.min(), 2).astype(str) + ' C'
africa_max_month = 'Suhu tertinggi di Africa pada bulan ' + africa_by_month[africa_by_month == africa_by_month.max()].index[0].astype(str) + ' dengan suhu ' + np.round(africa_by_month.max(), 2).astype(str) + ' C'

print(africa_min_year)
print(africa_max_year)
print(africa_min_month)
print(africa_max_month)

"""##### Region Asia

Dapat disimpulkan bahwa suhu rata-rata di Asia per tahun dan per bulan kurang lebih sama, yaitu mengalami kenaikan terlebih dulu lalu mengalami penurunan signifikan.
"""

fig, ax = plt.subplots(1, 2, figsize=(24,8))
asia_by_year = asia_df.groupby('Year')['AvgTemperature'].agg(np.mean)
asia_by_month = asia_df.groupby('Month')['AvgTemperature'].agg(np.mean)

ax[0].title.set_text('Asia average temperatures per Year')
ax[1].title.set_text('Asia average temperatures per Month')
sns.lineplot(data=asia_by_year, ax=ax[0])
sns.lineplot(data=asia_by_month, ax=ax[1])

asia_min_year = 'Suhu terendah di Asia pada tahun ' + asia_by_year[asia_by_year == asia_by_year.min()].index[0].astype(str) + ' dengan suhu ' + np.round(asia_by_year.min(), 2).astype(str) + ' C'
asia_max_year = 'Suhu tertinggi di Asia pada tahun ' + asia_by_year[asia_by_year == asia_by_year.max()].index[0].astype(str) + ' dengan suhu ' + np.round(asia_by_year.max(), 2).astype(str) + ' C'
asia_min_month = 'Suhu terendah di Asia pada bulan ' + asia_by_month[asia_by_month == asia_by_month.min()].index[0].astype(str) + ' dengan suhu ' + np.round(asia_by_month.min(), 2).astype(str) + ' C'
asia_max_month = 'Suhu tertinggi di Asia pada bulan ' + asia_by_month[asia_by_month == asia_by_month.max()].index[0].astype(str) + ' dengan suhu ' + np.round(asia_by_month.max(), 2).astype(str) + ' C'

print(asia_min_year)
print(asia_max_year)
print(asia_min_month)
print(asia_max_month)

"""##### Region Australia/South Pacific

Dapat disimpulkan bahwa suhu rata-rata di Australia per tahun mengalami perubahan dengan stabil kecuali pada 1998 terlihat suhu turun dengan drastis. Dan mengalami penurunan perlahan setiap bulan lalu mengalami peningkatan kembali
"""

fig, ax = plt.subplots(1, 2, figsize=(24,8))
ausie_by_year = ausie_df.groupby('Year')['AvgTemperature'].agg(np.mean)
ausie_by_month = ausie_df.groupby('Month')['AvgTemperature'].agg(np.mean)

ax[0].title.set_text('Australia average temperatures per Year')
ax[1].title.set_text('Australia average temperatures per Month')
sns.lineplot(data=ausie_by_year, ax=ax[0])
sns.lineplot(data=ausie_by_month, ax=ax[1])

ausie_min_year = 'Suhu terendah di Australia pada tahun ' + ausie_by_year[ausie_by_year == ausie_by_year.min()].index[0].astype(str) + ' dengan suhu ' + np.round(ausie_by_year.min(), 2).astype(str) + ' C'
ausie_max_year = 'Suhu tertinggi di Australia pada tahun ' + ausie_by_year[ausie_by_year == ausie_by_year.max()].index[0].astype(str) + ' dengan suhu ' + np.round(ausie_by_year.max(), 2).astype(str) + ' C'
ausie_min_month = 'Suhu terendah di Australia pada bulan ' + ausie_by_month[ausie_by_month == ausie_by_month.min()].index[0].astype(str) + ' dengan suhu ' + np.round(ausie_by_month.min(), 2).astype(str) + ' C'
ausie_max_month = 'Suhu tertinggi di Australia pada bulan ' + ausie_by_month[ausie_by_month == ausie_by_month.max()].index[0].astype(str) + ' dengan suhu ' + np.round(ausie_by_month.max(), 2).astype(str) + ' C'

print(ausie_min_year)
print(ausie_max_year)
print(ausie_min_month)
print(ausie_max_month)

"""##### Region Europe

Dapat disimpulkan bahwa suhu rata-rata di Europe per tahun mengalami kenaikan stabil hingga tahun 2014 sebelum mengalami penurunan. Lalu suhu rata-rata terus meningkat perbulang hingga puncaknya bulan 7 sebelum menurun dengan drastis
"""

fig, ax = plt.subplots(1, 2, figsize=(24,8))
europe_by_year = europe_df.groupby('Year')['AvgTemperature'].agg(np.mean)
europe_by_month = europe_df.groupby('Month')['AvgTemperature'].agg(np.mean)
europe_by_year = europe_by_year.iloc[2:]

ax[0].title.set_text('Europe average temperatures per Year')
ax[1].title.set_text('Europe average temperatures per Month')
sns.lineplot(data=europe_by_year, ax=ax[0])
sns.lineplot(data=europe_by_month, ax=ax[1])

europe_min_year = 'Suhu terendah di Europe pada tahun ' + europe_by_year[europe_by_year == europe_by_year.min()].index[0].astype(str) + ' dengan suhu ' + np.round(europe_by_year.min(), 2).astype(str) + ' C'
europe_max_year = 'Suhu tertinggi di Europe pada tahun ' + europe_by_year[europe_by_year == europe_by_year.max()].index[0].astype(str) + ' dengan suhu ' + np.round(europe_by_year.max(), 2).astype(str) + ' C'
europe_min_month = 'Suhu terendah di Europe pada bulan ' + europe_by_month[europe_by_month == europe_by_month.min()].index[0].astype(str) + ' dengan suhu ' + np.round(europe_by_month.min(), 2).astype(str) + ' C'
europe_max_month = 'Suhu tertinggi di Europe pada bulan ' + europe_by_month[europe_by_month == europe_by_month.max()].index[0].astype(str) + ' dengan suhu ' + np.round(europe_by_month.max(), 2).astype(str) + ' C'

print(europe_min_year)
print(europe_max_year)
print(europe_min_month)
print(europe_min_month)

"""##### Region Middle East

Dapat disimpulkan bahwa suhu rata-rata di Middle East per tahun mengalami kenaikan drastis pada tahun 2000 dan menurun drastis pada tahun 2019. Untuk per bulan suhu rata-rata mengalami kenaikan hingga bulan 8 lalu mengalami penurunan
"""

fig, ax = plt.subplots(1, 2, figsize=(24,8))
middle_east_by_year = middle_east_df.groupby('Year')['AvgTemperature'].agg(np.mean)
middle_east_by_month = middle_east_df.groupby('Month')['AvgTemperature'].agg(np.mean)

ax[0].title.set_text('Middle East average temperatures per Year')
ax[1].title.set_text('Middle East average temperatures per Month')
sns.lineplot(data=middle_east_by_year, ax=ax[0])
sns.lineplot(data=middle_east_by_month, ax=ax[1])

middle_east_min_year = 'Suhu terendah di Middle East pada tahun ' + middle_east_by_year[middle_east_by_year == middle_east_by_year.min()].index[0].astype(str) + ' dengan suhu ' + np.round(middle_east_by_year.min(), 2).astype(str) + ' C'
middle_east_max_year = 'Suhu tertinggi di Middle East pada tahun ' + middle_east_by_year[middle_east_by_year == middle_east_by_year.max()].index[0].astype(str) + ' dengan suhu ' + np.round(middle_east_by_year.max(), 2).astype(str) + ' C'
middle_east_min_month = 'Suhu terendah di Middle East pada bulan ' + middle_east_by_month[middle_east_by_month == middle_east_by_month.min()].index[0].astype(str) + ' dengan suhu ' + np.round(middle_east_by_month.min(), 2).astype(str) + ' C'
middle_east_max_month = 'Suhu tertinggi di Middle East pada bulan ' + middle_east_by_month[middle_east_by_month == middle_east_by_month.max()].index[0].astype(str) + ' dengan suhu ' + np.round(middle_east_by_month.max(), 2).astype(str) + ' C'

print(middle_east_min_year)
print(middle_east_max_year)
print(middle_east_min_month)
print(middle_east_min_month)

"""##### Region North America

Dapat disimpulkan bahwa suhu rata-rata di North America per tahun mengalami kenaikan stabil dengan noise hingga tahun 2016 sebelum mengalami penurunan drastis. Untuk suhu rata-rata per bulan di North America mengalami kenaikan hingga bulan 7 sebelum mengalami penurunan
"""

fig, ax = plt.subplots(1, 2, figsize=(24,8))
north_america_by_year = north_america_df.groupby('Year')['AvgTemperature'].agg(np.mean)
north_america_by_month = north_america_df.groupby('Month')['AvgTemperature'].agg(np.mean)
north_america_by_year = north_america_by_year.iloc[1:]

ax[0].title.set_text('North america average temperatures per Year')
ax[1].title.set_text('North america average temperatures per Month')
sns.lineplot(data=north_america_by_year, ax=ax[0])
sns.lineplot(data=north_america_by_month, ax=ax[1])

north_america_min_year = 'Suhu terendah di North America pada tahun ' + north_america_by_year[north_america_by_year == north_america_by_year.min()].index[0].astype(str) + ' dengan suhu ' + np.round(north_america_by_year.min(), 2).astype(str) + ' C'
north_america_max_year = 'Suhu tertinggi di North America pada tahun ' + north_america_by_year[north_america_by_year == north_america_by_year.max()].index[0].astype(str) + ' dengan suhu ' + np.round(north_america_by_year.max(), 2).astype(str) + ' C'
north_america_min_month = 'Suhu terendah di North America pada bulan ' + north_america_by_month[north_america_by_month == north_america_by_month.min()].index[0].astype(str) + ' dengan suhu ' + np.round(north_america_by_month.min(), 2).astype(str) + ' C'
north_america_max_month = 'Suhu tertinggi di North America pada bulan ' + north_america_by_month[north_america_by_month == north_america_by_month.max()].index[0].astype(str) + ' dengan suhu ' + np.round(north_america_by_month.max(), 2).astype(str) + ' C'

print(north_america_min_year)
print(north_america_max_year)
print(north_america_min_month)
print(north_america_min_month)

"""##### Region South/Central America & Carribean

Dapat disimpulkan bahwa suhu rata-rata di Carribean per tahun mengalami kenaikan stabil hingga sekarang. Untuk per bulan suhu rata-rata mengalami penurunan hingga bulan 6 sebelum mengalami kenaikan
"""

fig, ax = plt.subplots(1, 2, figsize=(24,8))
carribean_by_year = carribean_df.groupby('Year')['AvgTemperature'].agg(np.mean)
carribean_by_month = carribean_df.groupby('Month')['AvgTemperature'].agg(np.mean)
carribean_by_year = carribean_by_year.iloc[1:]

ax[0].title.set_text('Carribean average temperatures per Year')
ax[1].title.set_text('Carribean average temperatures per Month')
sns.lineplot(data=carribean_by_year, ax=ax[0])
sns.lineplot(data=carribean_by_month, ax=ax[1])

carribean_min_year = 'Suhu terendah di Carribean pada tahun ' + carribean_by_year[carribean_by_year == carribean_by_year.min()].index[0].astype(str) + ' dengan suhu ' + np.round(carribean_by_year.min(), 2).astype(str) + ' C'
carribean_max_year = 'Suhu tertinggi di Carribean pada tahun ' + carribean_by_year[carribean_by_year == carribean_by_year.max()].index[0].astype(str) + ' dengan suhu ' + np.round(carribean_by_year.max(), 2).astype(str) + ' C'
carribean_min_month = 'Suhu terendah di Carribean pada bulan ' + carribean_by_month[carribean_by_month == carribean_by_month.min()].index[0].astype(str) + ' dengan suhu ' + np.round(carribean_by_month.min(), 2).astype(str) + ' C'
carribean_max_month = 'Suhu tertinggi di Carribean pada bulan ' + carribean_by_month[carribean_by_month == carribean_by_month.max()].index[0].astype(str) + ' dengan suhu ' + np.round(carribean_by_month.max(), 2).astype(str) + ' C'

print(carribean_min_year)
print(carribean_max_year)
print(carribean_min_month)
print(carribean_min_month)

"""# Data Preprocecssing

Karena kita tinggal di region Asia, maka kita hanya perlu region Asia saja
"""

new_asia_df = new_df[new_df['Region'] == 'Asia']
new_asia_df.head()

col_to_drop = ['Region', 'Month', 'Year', 'Day']
new_asia_df = new_asia_df.drop(col_to_drop, axis=1)
new_asia_df.head()

print(f'The dataframe has {new_asia_df.shape[0]} recods and {df.shape[1]} columns')

"""Mencari outlier pada data"""

plt.figure(figsize=(15,7))
sns.boxplot(x='AvgTemperature', data=new_asia_df)

"""Bisa kita lihat terdapat banyak outlier, hal ini dapat kita hilangkan menggunakan IQR Method"""

Q1 = new_asia_df.quantile(.25)
Q3 = new_asia_df.quantile(.75)
IQR = Q3 - Q1
bot = Q1 - 1.5 * IQR
top = Q3 + 1.5 * IQR
new_asia_df = new_asia_df[~((new_asia_df < bot) | (new_asia_df > top)).any(axis=1)]

print(f'The dataframe has {new_asia_df.shape[0]} recods and {df.shape[1]} columns')

plt.figure(figsize=(15,7))
sns.boxplot(x='AvgTemperature', data=new_asia_df)

"""Setelah melakukan IQR Method untuk menghilangkan outlier, dapat kita lihat masih ada data yang menjadi outlier. Hal itu bisa kita hilangkan juga dengan melakukan normalisasi data. Pertama kita lihat distribusi data apakah data termasuk dalam distribusi normal atau tidak"""

sns.kdeplot(x='AvgTemperature', data=new_asia_df)

"""Bisa kita lihat data tidak terdistribusi dengan normal karena data agak ke skew ke kanan dan mempunya ekor sangat panjang di kiri, sehingga kita perlu menormalisasi data. Kita dapat menormalisasi data menggunakan library MinMaxScaler"""

from sklearn.preprocessing import MinMaxScaler

normalizer = MinMaxScaler()
new_asia_df['NormalizedTemp'] = normalizer.fit_transform(new_asia_df['AvgTemperature'].values.reshape(-1,1))
new_asia_df.head()

"""Setelah melakukan normalisasi, maka kita akan melihat distribusinya lagi untuk melihat perubahan"""

sns.kdeplot(x='NormalizedTemp', data=new_asia_df)

"""Bisa kita lihat, data yang telah dinormalisasi akan mengalami perubahan jarak pada skala dari 0 ke 1. Hal ini akan mempermudah model memproses data ini. Lalu kita akan membuat function yang akan membuat dataset dapat diterima model"""

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

temp = new_asia_df['NormalizedTemp'].values
temp

"""Lalu kita lakukan splitting dataset menjadi train dan validation dengan ration 80:20"""

from sklearn.model_selection import train_test_split

temp_train, temp_valid = train_test_split(temp, test_size=.2, random_state=0)

print('Total temp train:', len(temp_train))
print('Total temp valid:', len(temp_valid))

"""Lalu kita panggil function yang kita sudah buat untuk mengubah dataset menjadi data yang dapat diterima oleh model"""

window_size = 60
batch_size = 512
shuffle_buffer = 1000

train_set = windowed_dataset(temp_train, window_size=window_size, batch_size=batch_size, shuffle_buffer=shuffle_buffer)
valid_set = windowed_dataset(temp_valid, window_size=window_size, batch_size=batch_size, shuffle_buffer=shuffle_buffer)

train_set

"""# Modeling"""

from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dense

model = Sequential([
    LSTM(16, input_shape=[None, 1], return_sequences=True),
    LSTM(32),
    Dense(256, activation='relu'),
    Dense(1)
])

model.summary()

from tensorflow.keras.losses import Huber
from tensorflow.keras.optimizers import SGD

loss = Huber()
optimizer = SGD(learning_rate=1e-3)

model.compile(loss=loss, optimizer=optimizer, metrics=['mae'])

"""Membuat custom callback turunan dari class Callback tensorflow agar saat model sudah mencapai mae yang diingkan maka model akan stop training"""

from keras.callbacks import Callback

threshold = new_asia_df.shape[0] * 1e-3
class Callback(Callback):
  def on_epoch_end(self, epoch, logs={}):
    if logs.get('mae') < threshold and logs.get('val_mae') < threshold:
      print('\nStopping training. Model has reached the mae threshold')
      self.model.stop_training = True

history = model.fit(
    train_set,
    epochs=1000,
    validation_data=valid_set,
    callbacks=[Callback()]
)

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()